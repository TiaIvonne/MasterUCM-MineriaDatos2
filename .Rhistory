title = "Analfabetos versus paro") +
theme_minimal()
# Completa el código
ggplot(distritos, aes(x = T_superiores, y = T_paro)) +
geom_point(size = 7, alpha = 0.6) +
labs(x = "Estudios superiores", y = "paro",
title = "Estudios superiores vs paro") +
theme_minimal()
# Completa el código
pca_fit <-
PCA(cor_mat, scale.unit = TRUE, ncp = ncol(cor_mat), graph = FALSE)
# Completa el código
pca_fit$eig
# Completa el código
pca_fit$svd$V
# Completa el código
pca_fit$var$contrib
# Completa el código
pca_scores <- as_tibble(pca_fit$ind$coord)
#names(pca_scores) <- c("PC_1", "PC_2", "PC_3", "PC_4")
pca_scores # Nuevas coordenadas
# Completa el código
pca_fit <-
PCA(cor_mat, scale.unit = TRUE, ncp = 7, graph = FALSE)
pca_fit$var$contrib
# Completa el código
fviz_eig(pca_fit,
barfill = "darkolivegreen",
addlabels = TRUE) +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "Porcentaje de varianza explicada")
# Completa el código
cumvar <- as_tibble(pca_fit$eig)
names(cumvar) <- c("lambda", "var", "cumvar")
ggplot(cumvar, aes(x = 1:20, y = cumvar)) +
geom_col(fill = "pink") +
geom_hline(yintercept = 90,
linetype = "dashed") +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "% varianza acumulada")
# Completa el código
pca_scores <- as_tibble(pca_fit$ind$coord)
names(pca_scores) <- c("PC_1", "PC_2", "PC_3", "PC_4")
pca_scores # Nuevas coordenadas
# Completa el código
col <- c("#00AFBB", "#E7B800", "#FC4E07")
fviz_pca_var(pca_fit, col.var = "cos2",
gradient.cols = col,
repel = TRUE) +
theme_minimal() +
labs(title = "Coordenadas de las variables",
color = "Prop. var. explicada")
# Completa el código
fviz_cos2(pca_fit, choice = "var", axes = 1, top = 3)
# Completa el código
fviz_pca_biplot(pca_fit,
col.ind = distritos$Partido,
addEllipses = TRUE,
col.var = 'black',
palette = "jco",
repel = TRUE,
legend.title = "Partido más votado")
# Completa el código
receta <-
recipe(Partido ~ ., data = distritos) %>%
# Imputamos por la media las numéricas, por la moda las cuali
step_impute_mean(all_numeric_predictors()) %>%
step_impute_mode(all_nominal_predictors()) %>%
# Estandarizamos
step_normalize(all_numeric_predictors()) %>%
# Filtro cero varianza
step_zv(all_numeric_predictors())
receta
receta <-
receta %>%
step_pca(all_numeric_predictors(), num_comp = 5,
prefix = "PC")
data_pc <- bake(receta %>% prep(), new_data = NULL)
data_pc
ggplot(data_pc,
aes(x = .panel_x, y = .panel_y,
color = Partido, fill = Partido)) +
geom_point(alpha = 0.4, size = 0.9) +
ggforce::geom_autodensity(alpha = 0.3) +
ggforce::facet_matrix(vars(-Partido), layer.diag = 2) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
theme_minimal() +
labs(title = "PCA con tidymodels")
receta %>% prep() %>%
plot_top_loadings(component_number <= 5, n = 4) +
scale_fill_brewer(palette = "Paired")
# Completa el código
pca_fit <-
PCA(cor_mat, scale.unit = TRUE, ncp = 3, graph = FALSE)
pca_fit$var$contrib
# Completa el código
pca_full <- distritos %>% select(-Distrito, -Partido)
pca_fit <-
PCA(pca_full, scale.unit = TRUE, ncp = ncol(cor_mat), graph = FALSE)
# Completa el código
pca_fit$eig
# Completa el código
pca_fit$svd$V
# Completa el código
distritos_full <- distritos %>% select(-Distrito, -Partido)
pca_fit <-
PCA(distritos_full, scale.unit = TRUE, ncp = ncol(cor_mat), graph = FALSE)
# Completa el código
pca_fit$eig
# Completa el código
pca_fit$svd$V
# Completa el código
pca_fit$var$contrib
# Completa el código
pca_scores <- as_tibble(pca_fit$ind$coord)
#names(pca_scores) <- c("PC_1", "PC_2", "PC_3", "PC_4")
pca_scores # Nuevas coordenadas
# Completa el código
pca_fit <-
PCA(cor_mat, scale.unit = TRUE, ncp = 3, graph = FALSE)
pca_fit$var$contrib
# Completa el código
fviz_eig(pca_fit,
barfill = "darkolivegreen",
addlabels = TRUE) +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "Porcentaje de varianza explicada")
# Completa el código
pca_fit <-
PCA(cor_mat, scale.unit = TRUE, ncp = 10, graph = FALSE)
pca_fit$var$contrib
# Completa el código
fviz_eig(pca_fit,
barfill = "darkolivegreen",
addlabels = TRUE) +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "Porcentaje de varianza explicada")
# Completa el código
cumvar <- as_tibble(pca_fit$eig)
names(cumvar) <- c("lambda", "var", "cumvar")
ggplot(cumvar, aes(x = 1:20, y = cumvar)) +
geom_col(fill = "pink") +
geom_hline(yintercept = 90,
linetype = "dashed") +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "% varianza acumulada")
# Completa el código
pca_scores <- as_tibble(pca_fit$ind$coord)
names(pca_scores) <- c("PC_1", "PC_2", "PC_3", "PC_4")
pca_scores # Nuevas coordenadas
# Completa el código
col <- c("#00AFBB", "#E7B800", "#FC4E07")
fviz_pca_var(pca_fit, col.var = "cos2",
gradient.cols = col,
repel = TRUE) +
theme_minimal() +
labs(title = "Coordenadas de las variables",
color = "Prop. var. explicada")
# Completa el código
distritos_full <- distritos %>% select(-Distrito, -Partido)
pca_fit <-
PCA(distritos_full, scale.unit = TRUE, ncp = ncol(cor_mat), graph = FALSE)
# Completa el código
distritos_full <- distritos %>% select(-Distrito, -Partido)
pca_fit <-
PCA(distritos_full, scale.unit = TRUE, ncp = ncol(cor_mat), graph = FALSE)
# Completa el código
pca_fit <-
PCA(distritos_full, scale.unit = TRUE, ncp = 10, graph = FALSE)
pca_fit$var$contrib
# Completa el código
fviz_eig(pca_fit,
barfill = "darkolivegreen",
addlabels = TRUE) +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "Porcentaje de varianza explicada")
# Completa el código
cumvar <- as_tibble(pca_fit$eig)
names(cumvar) <- c("lambda", "var", "cumvar")
ggplot(cumvar, aes(x = 1:20, y = cumvar)) +
geom_col(fill = "pink") +
geom_hline(yintercept = 90,
linetype = "dashed") +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "% varianza acumulada")
# Completa el código
col <- c("#00AFBB", "#E7B800", "#FC4E07")
fviz_pca_var(pca_fit, col.var = "cos2",
gradient.cols = col,
repel = TRUE) +
theme_minimal() +
labs(title = "Coordenadas de las variables",
color = "Prop. var. explicada")
# Completa el código
distritos_full <- distritos %>% select(-Distrito, -Partido)
pca_fit <-
PCA(distritos_full, scale.unit = TRUE, ncp = ncol(distritos_full), graph = FALSE)
# Completa el código
pca_fit$eig
# Ajuste comunes de los chunk
knitr::opts_chunk$set(fig.width = 9, fig.asp = 1, out.width = "100%",
message = FALSE, warning = FALSE,
echo = TRUE, res = 400)
# Borramos variables del environment
rm(list = ls())
library(readxl)
library(skimr)
library(corrr)
library(corrplot)
library(tidyverse)
library(tidymodels)
library(factoextra)
library(FactoMineR)
library(ggforce)
library(learntidymodels)
distritos <- read_xlsx(path = "distritos.xlsx")
glimpse(distritos)
# Completa el código
distritos %>% skim()
# Completa el código
cov_mat <-
cov(distritos %>% select(-Distrito, -Partido))
cov_mat
# Completa el código
cor_mat <- distritos %>% select(-Distrito, -Partido)
cor_mat %>%  correlate(diagonal = 1) %>% fashion()
cor_mat
# Completa el código
corrplot(cor(distritos %>% select(-Distrito, -Partido)), type = "upper",
tl.col = "black",  method = "ellipse")
# Completa el código
ggplot(distritos, aes(x = Analfabetos, y = T_paro)) +
geom_point(size = 7, alpha = 0.6) +
labs(x = "Analfabetos", y =  "Paro",
title = "Analfabetos versus paro") +
theme_minimal()
# Completa el código
ggplot(distritos, aes(x = T_superiores, y = T_paro)) +
geom_point(size = 7, alpha = 0.6) +
labs(x = "Estudios superiores", y = "paro",
title = "Estudios superiores vs paro") +
theme_minimal()
# Completa el código
distritos_full <- distritos %>% select(-Distrito, -Partido)
pca_fit <-
PCA(distritos_full, scale.unit = TRUE, ncp = ncol(distritos_full), graph = FALSE)
# Completa el código
pca_fit$eig
# Completa el código
pca_fit$svd$V
# Completa el código
pca_fit$var$contrib
# Completa el código
pca_scores <- as_tibble(pca_fit$ind$coord)
#names(pca_scores) <- c("PC_1", "PC_2", "PC_3", "PC_4")
pca_scores # Nuevas coordenadas
# Completa el código
pca_fit <-
PCA(distritos_full, scale.unit = TRUE, ncp = 10, graph = FALSE)
pca_fit$var$contrib
# Completa el código
fviz_eig(pca_fit,
barfill = "darkolivegreen",
addlabels = TRUE) +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "Porcentaje de varianza explicada")
# Completa el código
cumvar <- as_tibble(pca_fit$eig)
names(cumvar) <- c("lambda", "var", "cumvar")
ggplot(cumvar, aes(x = 1:20, y = cumvar)) +
geom_col(fill = "pink") +
geom_hline(yintercept = 90,
linetype = "dashed") +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "% varianza acumulada")
# Completa el código
pca_scores <- as_tibble(pca_fit$ind$coord)
names(pca_scores) <- c("PC_1", "PC_2", "PC_3", "PC_4")
pca_scores # Nuevas coordenadas
# Completa el código
col <- c("#00AFBB", "#E7B800", "#FC4E07")
fviz_pca_var(pca_fit, col.var = "cos2",
gradient.cols = col,
repel = TRUE) +
theme_minimal() +
labs(title = "Coordenadas de las variables",
color = "Prop. var. explicada")
# Completa el código
fviz_cos2(pca_fit, choice = "var", axes = 1, top = 3)
# Completa el código
fviz_pca_biplot(pca_fit,
col.ind = distritos$Partido,
addEllipses = TRUE,
col.var = 'black',
palette = "jco",
repel = TRUE,
legend.title = "Partido más votado")
# Completa el código
receta <-
recipe(Partido ~ ., data = distritos) %>%
# Imputamos por la media las numéricas, por la moda las cuali
step_impute_mean(all_numeric_predictors()) %>%
step_impute_mode(all_nominal_predictors()) %>%
# Estandarizamos
step_normalize(all_numeric_predictors()) %>%
# Filtro cero varianza
step_zv(all_numeric_predictors())
receta
receta <-
receta %>%
step_pca(all_numeric_predictors(), num_comp = 5,
prefix = "PC")
data_pc <- bake(receta %>% prep(), new_data = NULL)
data_pc
ggplot(data_pc,
aes(x = .panel_x, y = .panel_y,
color = Partido, fill = Partido)) +
geom_point(alpha = 0.4, size = 0.9) +
ggforce::geom_autodensity(alpha = 0.3) +
ggforce::facet_matrix(vars(-Partido), layer.diag = 2) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
theme_minimal() +
labs(title = "PCA con tidymodels")
receta %>% prep() %>%
plot_top_loadings(component_number <= 5, n = 4) +
scale_fill_brewer(palette = "Paired")
# Completa el código
pca_fit <-
PCA(distritos_full, scale.unit = TRUE, ncp = 10, graph = FALSE)
pca_fit$var$contrib
# Completa el código
receta <-
recipe(Partido ~ ., data = distritos) %>%
# Imputamos por la media las numéricas, por la moda las cuali
step_impute_mean(all_numeric_predictors()) %>%
step_impute_mode(all_nominal_predictors()) %>%
# Estandarizamos
step_normalize(all_numeric_predictors()) %>%
# Filtro cero varianza
step_zv(all_numeric_predictors())
receta
receta <-
receta %>%
step_pca(all_numeric_predictors(), num_comp = 5,
prefix = "PC")
data_pc <- bake(receta %>% prep(), new_data = NULL)
data_pc
ggplot(data_pc,
aes(x = .panel_x, y = .panel_y,
color = Partido, fill = Partido)) +
geom_point(alpha = 0.4, size = 0.9) +
ggforce::geom_autodensity(alpha = 0.3) +
ggforce::facet_matrix(vars(-Partido), layer.diag = 2) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
theme_minimal() +
labs(title = "PCA con tidymodels")
receta %>% prep() %>%
plot_top_loadings(component_number <= 5, n = 5) +
scale_fill_brewer(palette = "Paired")
# Ajuste comunes de los chunk
knitr::opts_chunk$set(fig.width = 9, fig.asp = 1, out.width = "100%",
message = FALSE, warning = FALSE,
echo = TRUE, res = 400)
# Borramos variables del environment
rm(list = ls())
library(readxl)
library(skimr)
library(corrr)
library(corrplot)
library(tidyverse)
library(tidymodels)
library(factoextra)
library(FactoMineR)
library(ggforce)
library(learntidymodels)
distritos <- read_xlsx(path = "distritos.xlsx")
glimpse(distritos)
# Completa el código
distritos %>% skim()
# Completa el código
cov_mat <-
cov(distritos %>% select(-Distrito, -Partido))
cov_mat
# Completa el código
cor_mat <- distritos %>% select(-Distrito, -Partido)
cor_mat %>%  correlate(diagonal = 1) %>% fashion()
cor_mat
# Completa el código
corrplot(cor(distritos %>% select(-Distrito, -Partido)), type = "upper",
tl.col = "black",  method = "ellipse")
# Completa el código
ggplot(distritos, aes(x = Analfabetos, y = T_paro)) +
geom_point(size = 7, alpha = 0.6) +
labs(x = "Analfabetos", y =  "Paro",
title = "Analfabetos versus paro") +
theme_minimal()
# Completa el código
ggplot(distritos, aes(x = T_superiores, y = T_paro)) +
geom_point(size = 7, alpha = 0.6) +
labs(x = "Estudios superiores", y = "paro",
title = "Estudios superiores vs paro") +
theme_minimal()
# Completa el código
distritos_full <- distritos %>% select(-Distrito, -Partido)
pca_fit <-
PCA(distritos_full, scale.unit = TRUE, ncp = ncol(distritos_full), graph = FALSE)
# Completa el código
pca_fit$eig
# Completa el código
pca_fit$svd$V
# Completa el código
pca_fit$var$contrib
# Completa el código
pca_scores <- as_tibble(pca_fit$ind$coord)
#names(pca_scores) <- c("PC_1", "PC_2", "PC_3", "PC_4")
pca_scores # Nuevas coordenadas
# Completa el código
pca_fit <-
PCA(distritos_full, scale.unit = TRUE, ncp = 10, graph = FALSE)
pca_fit$var$contrib
# Completa el código
fviz_eig(pca_fit,
barfill = "darkolivegreen",
addlabels = TRUE) +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "Porcentaje de varianza explicada")
# Completa el código
cumvar <- as_tibble(pca_fit$eig)
names(cumvar) <- c("lambda", "var", "cumvar")
ggplot(cumvar, aes(x = 1:20, y = cumvar)) +
geom_col(fill = "pink") +
geom_hline(yintercept = 90,
linetype = "dashed") +
theme_minimal() +
labs(x = "Componente",
y = "% varianza explicada",
title = "% varianza acumulada")
# Completa el código
pca_scores <- as_tibble(pca_fit$ind$coord)
names(pca_scores) <- c("PC_1", "PC_2", "PC_3", "PC_4")
pca_scores # Nuevas coordenadas
# Completa el código
col <- c("#00AFBB", "#E7B800", "#FC4E07")
fviz_pca_var(pca_fit, col.var = "cos2",
gradient.cols = col,
repel = TRUE) +
theme_minimal() +
labs(title = "Coordenadas de las variables",
color = "Prop. var. explicada")
# Completa el código
fviz_cos2(pca_fit, choice = "var", axes = 1, top = 3)
# Completa el código
fviz_pca_biplot(pca_fit,
col.ind = distritos$Partido,
addEllipses = TRUE,
col.var = 'black',
palette = "jco",
repel = TRUE,
legend.title = "Partido más votado")
# Completa el código
receta <-
recipe(Partido ~ ., data = distritos) %>%
# Imputamos por la media las numéricas, por la moda las cuali
step_impute_mean(all_numeric_predictors()) %>%
step_impute_mode(all_nominal_predictors()) %>%
# Estandarizamos
step_normalize(all_numeric_predictors()) %>%
# Filtro cero varianza
step_zv(all_numeric_predictors())
receta
receta <-
receta %>%
step_pca(all_numeric_predictors(), num_comp = 5,
prefix = "PC")
data_pc <- bake(receta %>% prep(), new_data = NULL)
data_pc
ggplot(data_pc,
aes(x = .panel_x, y = .panel_y,
color = Partido, fill = Partido)) +
geom_point(alpha = 0.4, size = 0.9) +
ggforce::geom_autodensity(alpha = 0.3) +
ggforce::facet_matrix(vars(-Partido), layer.diag = 2) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
theme_minimal() +
labs(title = "PCA con tidymodels")
receta %>% prep() %>%
plot_top_loadings(component_number <= 5, n = 5) +
scale_fill_brewer(palette = "Paired")
